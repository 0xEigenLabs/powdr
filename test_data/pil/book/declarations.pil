namespace Main(16);
// ANCHOR: declarations
    // This defines a constant
    let rows = 2**16;
    // This defines a fixed column that contains the row number in each row.
    // Only symbols whose type is "col" are considered fixed columns.
    let step: col = |i| i;
    // Here, we have a witness column.
    let x;
    // This functions defines a fixed column where each cell contains the
    // square of its row number.
    let square: col = |x| x*x;
    // The same function as `square` above, but now its type is given as
    // `int -> int` and thus it is *not* classified as a column. Instead,
    // it is stored as a utility function. If utility functions are
    // referenced in constraints, they have to be evaluated, meaning that
    // the constraint `w = square_non_column;` is invalid but both
    // `w = square_non_column(7);` and `w = square;` are valid constraints.
    let square_non_column: int -> int = |x| x*x;
    // A recursive function, taking a function and an integer as parameter
    let sum = |f, i| match i {
        0 => f(0),
        _ => f(i) + sum(f, i - 1)
    };
// ANCHOR_END: declarations
    // We need at least one constraint to create a proof in the test.
    let w;
    w + square = 0;