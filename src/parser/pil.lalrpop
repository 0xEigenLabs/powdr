use crate::parser::ast::*;

grammar;

match {
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _,
}

pub PILFile: PILFile = {
    (<Statement> ";")* => PILFile(<>)

};

Statement = {
    Include,
    Namespace,
    PolynomialDefinition,
    PolynomialConstantDeclaration,
};

Include: Statement = {
    "include" <file:StringLiteral> => Statement::Include(<>)
};

Namespace: Statement = {
    "namespace" <name:Identifier> "(" <pol_degree:Expression> ")" => Statement::Namespace(<>)
}

PolynomialDefinition: Statement = {
    "pol" <Identifier> "=" <Expression> => Statement::PolynomialDefinition(<>)
}

PolynomialConstantDeclaration: Statement = {
    "pol" "constant" <Identifier> => Statement::PolynomialConstantDeclaration(<>)
}

Expression: Expression = {
    ConstantIdentifier => Expression::Constant(<>)
}

StringLiteral: String = {
    r#""[^"]*""# => <>[1..<>.len() - 1].to_string()
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z$_0-9]+" => <>.to_string()
}

ConstantIdentifier: String = {
    // TODO it seems the lexer splits the token after %
    "%N" => <>.to_string(),
    r"%[a-zA-Z_][a-zA-Z$_0-9]+" => <>.to_string(),
}