use std::str::FromStr;
use crate::parser::ast::*;

grammar;

match {
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _,
}

pub PILFile: PILFile = {
    (<Statement> ";")* => PILFile(<>)

};

Statement = {
    Include,
    Namespace,
    ConstantDefinition,
    PolynomialDefinition,
    PolynomialConstantDeclaration,
    PolynomialCommitDeclaration,
    PolynomialIdentity,
    PlookupIdentity,
};

Include: Statement = {
    "include" <file:StringLiteral> => Statement::Include(<>)
};

Namespace: Statement = {
    "namespace" <name:Identifier> "(" <pol_degree:Expression> ")" => Statement::Namespace(<>)
}

ConstantDefinition: Statement = {
    "constant" <ConstantIdentifier> "=" <Expression> => Statement::ConstantDefinition(<>)
}

PolynomialDefinition: Statement = {
    "pol" <Identifier> "=" <Expression> => Statement::PolynomialDefinition(<>)
}

PolynomialConstantDeclaration: Statement = {
    "pol" "constant" <Identifier> => Statement::PolynomialConstantDeclaration(<>)
}

PolynomialCommitDeclaration: Statement = {
    "pol" "commit" <Identifier> => Statement::PolynomialCommitDeclaration(<>)
}

PolynomialIdentity: Statement = {
    <l:BoxedExpression> "=" <r:BoxedExpression> => Statement::PolynomialIdentity(Expression::BinaryOperation(l, BinaryOperator::Sub, r))
}

PlookupIdentity: Statement = {
    <SelectedExpressions> "in" <SelectedExpressions> => Statement::PlookupIdentity(<>)
}

SelectedExpressions: SelectedExpressions = {
    <selector:Expression?> "{" <expressions:ExpressionList> "}" => SelectedExpressions{<>},
    Expression => SelectedExpressions{selector: None, expressions: vec![<>]},
}

ExpressionList: Vec<Expression> = {
    <mut list:( <Expression> "," )*> <end:Expression>  => { list.push(end); list }
}

Expression: Expression = {
    BoxedExpression => *<>,
}

BoxedExpression: Box<Expression> = {
    BoxedExpression SumOp Product => Box::new(Expression::BinaryOperation(<>)),
    Product,
}

SumOp: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
}

Product: Box<Expression> = {
    Product ProductOp Power => Box::new(Expression::BinaryOperation(<>)),
    Power,
}

ProductOp: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
}

Power: Box<Expression> = {
    <Power> <PowOp> <Term> => Box::new(Expression::BinaryOperation(<>)),
    Term,
}

PowOp: BinaryOperator = {
    "**" => BinaryOperator::Pow,
}

Term: Box<Expression> = {
    ConstantIdentifier => Box::new(Expression::Constant(<>)),
    PolynomialReference => Box::new(Expression::PolynomialReference(<>)),
    Number => Box::new(Expression::Number(<>)),
    "(" <BoxedExpression> ")",
}

PolynomialReference: PolynomialReference = {
    <namespace:( <Identifier> "." )?>
    <name:Identifier>
    <index:( "[" <BoxedExpression> "]" )?>
    <next:"'"?> => PolynomialReference{namespace, name, index, next: next.is_some()},
}

StringLiteral: String = {
    r#""[^"]*""# => <>[1..<>.len() - 1].to_string()
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z$_0-9]*" => <>.to_string()
}

ConstantIdentifier: String = {
    // TODO it seems the lexer splits the token after %
    "%N" => <>.to_string(),
    r"%[a-zA-Z_][a-zA-Z$_0-9]*" => <>.to_string(),
}

Number: u64 = {
    r"[0-9]+" => u64::from_str(<>).unwrap(),
}