use std::str::FromStr;
use crate::parser::{Statement, Argument, Register, Expression, unescape_string, BinaryOpKind as BOp, UnaryOpKind as UOp, new_binary_op as bin_op, new_unary_op as un_op};

grammar;

match {
    r"\s*" => { },
    r"#[^\n\r]*[\n\r]*" => { }, // Skip `# comments`
    r"x[0-9]",
    r"x1[0-9]",
    r"x2[0-9]",
    r"x3[0-1]",
    r"a[0-7]",
    r"s[0-1]",
    r"s[2-9]",
    r"s1[0-1]",
    r"t[0-2]",
    r"t[3-6]",
    _,
}

pub Statements: Vec<Statement> = {
    <ls:LabelOrStatement*> <s:Statement?> => ls.into_iter().flatten().chain(s.into_iter()).collect(),
}

LabelOrStatement: Option<Statement> = {
    Label => Some(<>),
    <Statement?> ";" => <>
}

Label: Statement = {
    <Symbol> ":" => Statement::Label(<>),
    <Number> ":" => Statement::Label(<>.to_string())
}

Statement: Statement = {
    Directive,
    Instruction,
}

Directive: Statement = {
    <DottedSymbol> <Arguments> => Statement::Directive(<>)
}

Instruction: Statement = {
    <DotlessSymbol> <Arguments> => Statement::Instruction(<>)
}

Arguments: Vec<Argument> = {
    => vec![],
    <mut list:( <Argument> "," )*> <end:Argument>  => { list.push(end); list }
}

Argument: Argument = {
    Register => Argument::Register(<>),
    OffsetRegister,
    StringLiteral => Argument::StringLiteral(<>),
    Expression => Argument::Expression(<>),
}

Register: Register = {
    r"x[0-9]" => Register(<>[1..].parse().unwrap()),
    r"x1[0-9]" => Register(<>[1..].parse().unwrap()),
    r"x2[0-9]" => Register(<>[1..].parse().unwrap()),
    r"x3[0-1]" => Register(<>[1..].parse().unwrap()),
    "zero" => Register(0),
    "ra" => Register(1),
    "sp" => Register(2),
    "gp" => Register(3),
    "tp" => Register(4),
    r"a[0-7]" => Register(10 + <>[1..].parse::<u8>().unwrap()),
    "fp" => Register(8),
    r"s[0-1]" => Register(8 + <>[1..].parse::<u8>().unwrap()),
    r"s[2-9]" => Register(16 + <>[1..].parse::<u8>().unwrap()),
    r"s1[0-1]" => Register(16 + <>[1..].parse::<u8>().unwrap()),
    r"t[0-2]" => Register(5 + <>[1..].parse::<u8>().unwrap()),
    r"t[3-6]" => Register(25 + <>[1..].parse::<u8>().unwrap()),
}

OffsetRegister: Argument = {
    <c:Expression> "(" <r:Register> ")" => Argument::RegOffset(r, c),
}

Expression: Expression = {
    ExprBinaryOr,
}

ExprBinaryOr: Expression = {
    <l:ExprBinaryOr> "|" <r:ExprBinaryXor> => bin_op(BOp::Or, l, r),
    ExprBinaryXor,
}

ExprBinaryXor: Expression = {
    <l:ExprBinaryXor> "^" <r:ExprBinaryAnd> => bin_op(BOp::Xor, l, r),
    ExprBinaryAnd,
}

ExprBinaryAnd: Expression = {
    <l:ExprBinaryAnd> "&" <r:ExprBitShift> => bin_op(BOp::And, l, r),
    ExprBitShift,
}

ExprBitShift: Expression = {
    <l:ExprBitShift> "<<" <r:ExprSum> => bin_op(BOp::LeftShift, l, r),
    <l:ExprBitShift> ">>" <r:ExprSum> => bin_op(BOp::RightShift, l, r),
    ExprSum,
}

ExprSum: Expression = {
    <l:ExprSum> "+" <r:ExprProduct> => bin_op(BOp::Add, l, r),
    <l:ExprSum> "-" <r:ExprProduct> => bin_op(BOp::Sub, l, r),
    ExprProduct,
}

ExprProduct: Expression = {
    <l:ExprProduct> "*" <r:ExprUnary> => bin_op(BOp::Mul, l, r),
    <l:ExprProduct> "/" <r:ExprUnary> => bin_op(BOp::Div, l, r),
    <l:ExprProduct> "%" <r:ExprUnary> => bin_op(BOp::Mod, l, r),
    ExprUnary,
}

ExprUnary: Expression = {
    "-" <ExprTerm> => un_op(UOp::Negation, <>),
    "+" <ExprTerm>,
    ExprTerm,
}

ExprTerm: Expression = {
    Number => Expression::Number(<>),
    "(" <Expression> ")" => <>,
    "%hi(" <Expression> ")" => un_op(UOp::HiDataRef, <>),
    "%lo(" <Expression> ")" => un_op(UOp::LoDataRef, <>),
    Symbol => Expression::Symbol(<>)
}

StringLiteral: Vec<u8> = {
    r#""[^\\"\n\r]*(\\[tnfbrx'"\\0-9][^\\"\n\r]*)*""# => unescape_string(<>)
}

DotlessSymbol: String = {
    r"[a-zA-Z_@][a-zA-Z$_0-9.@]*" => <>.to_string()
}

DottedSymbol: String = {
    r"\.[a-zA-Z_@.][a-zA-Z$_0-9.@]*" => <>.to_string()
}

Symbol: String = {
    DotlessSymbol,
    DottedSymbol,
}

Number: i64 = {
    r"-?[0-9][0-9_]*" => i64::from_str(<>).unwrap().into(),
    r"0x[0-9A-Fa-f][0-9A-Fa-f_]*" => i64::from_str_radix(&<>[2..].replace('_', ""), 16).unwrap().into(),
}
