use std::str::FromStr;
use crate::parser::{Statement, Argument, Register, Constant, unescape_string};

grammar;

match {
    r"\s*" => { },
    r"#[^\n\r]*[\n\r]*" => { }, // Skip `# comments`
    r"x[0-9]",
    r"x1[0-9]",
    r"x2[0-9]",
    r"x3[0-1]",
    r"a[0-7]",
    r"s[0-1]",
    r"s[2-9]",
    r"s1[0-1]",
    r"t[0-2]",
    r"t[3-6]",
    _,
}

pub Statements: Vec<Statement> = {
    <ls:LabelOrStatement*> <s:Statement?> => ls.into_iter().flatten().chain(s.into_iter()).collect(),
}

LabelOrStatement: Option<Statement> = {
    Label => Some(<>),
    <Statement?> ";" => <>
}

Label: Statement = {
    <Symbol> ":" => Statement::Label(<>),
    <Number> ":" => Statement::Label(<>.to_string())
}

Statement: Statement = {
    Directive,
    Instruction,
}

Directive: Statement = {
    <DottedSymbol> <Arguments> => Statement::Directive(<>)
}

Instruction: Statement = {
    <DotlessSymbol> <Arguments> => Statement::Instruction(<>)
}

Arguments: Vec<Argument> = {
    => vec![],
    <mut list:( <Argument> "," )*> <end:Argument>  => { list.push(end); list }
}

Argument: Argument = {
    Register => Argument::Register(<>),
    OffsetRegister,
    StringLiteral => Argument::StringLiteral(<>),
    Symbol => Argument::Symbol(<>),
    Constant => Argument::Constant(<>),
    Difference,
}

Register: Register = {
    r"x[0-9]" => Register(<>[1..].parse().unwrap()),
    r"x1[0-9]" => Register(<>[1..].parse().unwrap()),
    r"x2[0-9]" => Register(<>[1..].parse().unwrap()),
    r"x3[0-1]" => Register(<>[1..].parse().unwrap()),
    "zero" => Register(0),
    "ra" => Register(1),
    "sp" => Register(2),
    "gp" => Register(3),
    "tp" => Register(4),
    r"a[0-7]" => Register(10 + <>[1..].parse::<u8>().unwrap()),
    "fp" => Register(8),
    r"s[0-1]" => Register(8 + <>[1..].parse::<u8>().unwrap()),
    r"s[2-9]" => Register(16 + <>[1..].parse::<u8>().unwrap()),
    r"s1[0-1]" => Register(16 + <>[1..].parse::<u8>().unwrap()),
    r"t[0-2]" => Register(5 + <>[1..].parse::<u8>().unwrap()),
    r"t[3-6]" => Register(25 + <>[1..].parse::<u8>().unwrap()),
}

OffsetRegister: Argument = {
    <c:Constant> "(" <r:Register> ")" => Argument::RegOffset(r, c),
}

Constant: Constant = {
    ConstantExpression => Constant::Number(<>),
    "%hi(" <Symbol> ")" => Constant::HiDataRef(<>),
    "%lo(" <Symbol> ")" => Constant::LoDataRef(<>),
}

ConstantExpression: i64 = {
    <l:ConstantExpression> "|" <r:ConstantBinaryXor> => l | r,
    ConstantBinaryXor,
}

ConstantBinaryXor: i64 = {
    <l:ConstantBinaryXor> "^" <r:ConstantBinaryAnd> => l ^ r,
    ConstantBinaryAnd,
}

ConstantBinaryAnd: i64 = {
    <l:ConstantBinaryAnd> "&" <r:ConstantBitShift> => l & r,
    ConstantBitShift,
}

ConstantBitShift: i64 = {
    <l:ConstantBitShift> "<<" <r:ConstantSum> => l << r,
    <l:ConstantBitShift> ">>" <r:ConstantSum> => l >> r,
    ConstantSum,
}

ConstantSum: i64 = {
    <l:ConstantSum> "+" <r:ConstantProduct> => l + r,
    <l:ConstantSum> "-" <r:ConstantProduct> => l - r,
    ConstantProduct,
}

ConstantProduct: i64 = {
    <l:ConstantProduct> "*" <r:ConstantUnary> => l * r,
    <l:ConstantProduct> "/" <r:ConstantUnary> => l / r,
    <l:ConstantProduct> "%" <r:ConstantUnary> => l % r,
    ConstantUnary,
}

ConstantUnary: i64 = {
    "-" <ConstantTerm> => -<>,
    "+" <ConstantTerm> => <>,
    ConstantTerm,
}

ConstantTerm: i64 = {
    Number,
    "(" <ConstantExpression> ")",
}

Difference: Argument = {
    <Symbol> "-" <Symbol> => Argument::Difference(<>)
}

StringLiteral: Vec<u8> = {
    r#""[^\\"\n\r]*(\\[tnfbrx'"\\0-9][^\\"\n\r]*)*""# => unescape_string(<>)
}

DotlessSymbol: String = {
    r"[a-zA-Z_@][a-zA-Z$_0-9.@]*" => <>.to_string()
}

DottedSymbol: String = {
    r"\.[a-zA-Z_@.][a-zA-Z$_0-9.@]*" => <>.to_string()
}

Symbol: String = {
    DotlessSymbol,
    DottedSymbol,
}

Number: i64 = {
    r"-?[0-9][0-9_]*" => i64::from_str(<>).unwrap().into(),
    r"0x[0-9A-Fa-f][0-9A-Fa-f_]*" => i64::from_str_radix(&<>[2..].replace('_', ""), 16).unwrap().into(),

}